package document

import (
	"bytes"
	"testing"

	cms "github.com/gmrtd/gmrtd/cms"
	"github.com/gmrtd/gmrtd/utils"
)

func TestNewCardSecurityNoData(t *testing.T) {
	if cardSec, err := NewCardSecurity(nil); cardSec != nil || err != nil {
		t.Errorf("Should be nil when no input data provided")
	}

	if cardSec, err := NewCardSecurity([]byte{}); cardSec != nil || err != nil {
		t.Errorf("Should be nil when no input data provided")
	}
}

func TestNewCardSecurityUnhappyBadData(t *testing.T) {
	var cardSecurityFile []byte = utils.HexToBytes("0608") // invalid data

	cardSecurity, err := NewCardSecurity(cardSecurityFile)

	if err == nil {
		t.Errorf("Error expected")
	}

	if cardSecurity != nil {
		t.Errorf("CardSecurity not expected for error case")
	}
}

func TestNewCardSecurityBadSignedDataOid(t *testing.T) {
	// based on 'TestNewCardSecurityDE', but with the EContent-OID slightly modified

	// DE (with corrupted EContent-OID) - 0.4.0.127.0.7.3.2.1 -> 0.4.0.127.0.7.3.2.2 (i.e. last digit 1->2)
	var cardSecurityFile []byte = utils.HexToBytes

	_, err := NewCardSecurity(cardSecurityFile)

	if err == nil {
		t.Errorf("Error expected")
	}
}

func TestNewCardSecurityBadSecInfos(t *testing.T) {
	// based on 'TestNewCardSecurityDE', but with SecurityInfos corrupted

	var cardSecurityFile []byte = utils.HexToBytes

	_, err := NewCardSecurity(cardSecurityFile)

	if err == nil {
		t.Errorf("Error expected")
	}
}

func TestNewCardSecurityDE(t *testing.T) {
	/*
	 * get the (default) CSCA Certificate-Pool
	 */
	cscaCertPool, err := cms.GetDefaultMasterList()
	if err != nil {
		t.Fatalf("CscaCertPool error: %s", err)
	}

	// DE
	var cardSecurityFile []byte = utils.HexToBytes
	var expCertCSCA []byte = utils.HexToBytes("3082051c30820480a0030201020202048b300a06082a8648ce3d0403043041310b3009060355040613024445310d300b060355040a0c0462756e64310c300a060355040b0c036273693115301306035504030c0c637363612d6765726d616e79301e170d3231313132333036323431355a170d3336303232333233353935395a3041310b3009060355040613024445310d300b060355040a0c0462756e64310c300a060355040b0c036273693115301306035504030c0c637363612d6765726d616e7930820238308201af06072a8648ce3d0201308201a2020101304c06072a8648ce3d0101024100aadd9db8dbe9c48b3fd4e6ae33c9fc07cb308db3b3c9d20ed6639cca703308717d4d9b009bc66842aecda12ae6a380e62881ff2f2d82c68528aa6056583a48f330818404407830a3318b603b89e2327145ac234cc594cbdd8d3df91610a83441caea9863bc2ded5d5aa8253aa10a2ef1c98b9ac8b57f1117a72bf2c7b9e7c1ac4d77fc94ca04403df91610a83441caea9863bc2ded5d5aa8253aa10a2ef1c98b9ac8b57f1117a72bf2c7b9e7c1ac4d77fc94cadc083e67984050b75ebae5dd2809bd638016f7230481810481aee4bdd82ed9645a21322e9c4c6a9385ed9f70b5d916c1b43b62eef4d0098eff3b1f78e2d0d48d50d1687b93b97d5f7c6d5047406a5e688b352209bcb9f8227dde385d566332ecc0eabfa9cf7822fdf209f70024a57b1aa000c55b881f8111b2dcde494a5f485e5bca4bd88a2763aed1ca2b2fa8f0540678cd1e0f3ad80892024100aadd9db8dbe9c48b3fd4e6ae33c9fc07cb308db3b3c9d20ed6639cca70330870553e5c414ca92619418661197fac10471db1d381085ddaddb58796829ca9006902010103818200048190956c09b852981dc52949f3463b8efcdfe65e3e5a51d1c0dacf27c75e8252cc0840157a21a97bd9b4c927312afa8ae0ca1ca515f98cc1150f9a768d4d43ef556abcd3564bcaf583f53c6f40918155146dbab57f6cac0ba838010345e3dbc7140d82ea339a5747d48c53f02db42187d320ed4e275c755092750b04fe72ae97a382018530820181301d0603551d0e04160414a40a5fc380ae3e59af1b32d6136aefeec8ca35e8300e0603551d0f0101ff040403020106302b0603551d1004243022800f32303231313132333036323431355a810f32303235303132333233353935395a30160603551d20040f300d300b060904007f00070301010130510603551d11044a30488118637363612d6765726d616e79406273692e62756e642e6465861c68747470733a2f2f7777772e6273692e62756e642e64652f63736361a40e300c310a300806035504070c014430510603551d12044a30488118637363612d6765726d616e79406273692e62756e642e6465861c68747470733a2f2f7777772e6273692e62756e642e64652f63736361a40e300c310a300806035504070c014430120603551d130101ff040830060101ff02010030300603551d1f042930273025a023a021861f687474703a2f2f7777772e6273692e62756e642e64652f637363615f63726c301f0603551d23041830168014a40a5fc380ae3e59af1b32d6136aefeec8ca35e8300a06082a8648ce3d040304038189003081850241009207451b0276c9b0bfe91c3b3fb7594489f6d5c34d4ff11149f1937beccf1a8d3919267b2bcbb176e2b9ecf6a4c240b0e1d0983e242a32e0c160d530db6934d5024037fb298c2da3ef90c70949aec7111f5eedd0a708a936ceab479d357da08c742762a3cddd2d6aa586d6822ebb762cfdcb5db734ee6d7f8ec1ed366305ba1aef0b")
	var expCertDSC []byte = utils.HexToBytes("30820493308203f8a003020102020204a8300a06082a8648ce3d0403043041310b3009060355040613024445310d300b060355040a0c0462756e64310c300a060355040b0c036273693115301306035504030c0c637363612d6765726d616e79301e170d3233303130343036303434325a170d3333303730343233353935395a305d310b3009060355040613024445311d301b060355040a0c1442756e646573647275636b6572656920476d6248310c300a060355040513033135323121301f06035504030c18446f63756d656e74205369676e65722050617373706f7274308201b53082014d06072a8648ce3d020130820140020101303c06072a8648ce3d01010231008cb91e82a3386d280f5d6f7e50e641df152f7109ed5456b412b1da197fb71123acd3a729901d1a71874700133107ec53306404307bc382c63d8c150c3c72080ace05afa0c2bea28e4fb22787139165efba91f90f8aa5814a503ad4eb04a8c7dd22ce2826043004a8c7dd22ce28268b39b55416f0447c2fb77de107dcd2a62e880ea53eeb62d57cb4390295dbc9943ab78696fa504c110461041d1c64f068cf45ffa2a63a81b7c13f6b8847a3e77ef14fe3db7fcafe0cbd10e8e826e03436d646aaef87b2e247d4af1e8abe1d7520f9c2a45cb1eb8e95cfd55262b70b29feec5864e19c054ff99129280e4646217791811142820341263c53150231008cb91e82a3386d280f5d6f7e50e641df152f7109ed5456b31f166e6cac0425a7cf3ab6af6b7fc3103b883202e9046565020101036200042ca852cb9a1caaaa466256d1cfd678bb7e5d8502dfa6f3fdb287293c32af9fa77ad3a7fa92e56f608110053121354002198b530bc60ac7050ab98d7f6c475fd50706a4a6207d7a6336cb480b966a3aa64894f7f42b8fb4ac4774c9d6892330fba382016430820160301f0603551d23041830168014a40a5fc380ae3e59af1b32d6136aefeec8ca35e8301d0603551d0e04160414af9dd5e6565737a8804b5b4c6f45093d809aa865300e0603551d0f0101ff040403020780302b0603551d1004243022800f32303233303130343036303434325a810f32303233303730343233353935395a30160603551d20040f300d300b060904007f000703010101302d0603551d1104263024821262756e646573647275636b657265692e6465a40e300c310a300806035504070c014430510603551d12044a30488118637363612d6765726d616e79406273692e62756e642e6465861c68747470733a2f2f7777772e6273692e62756e642e64652f63736361a40e300c310a300806035504070c01443015060767810801010602040a3008020100310313015030300603551d1f042930273025a023a021861f687474703a2f2f7777772e6273692e62756e642e64652f637363615f63726c300a06082a8648ce3d0403040381880030818402404846f4a03e17896e9094af7652c38fe31ec964c2c3a906af813aabef5fe4f3156d140e2ef991dc11fd860a4a301b225de9fd4ed39b4f47ac72cdb88cc63b335902405d4e2895875e603ce2863073bf441d1ec53761cf47e5bc2b9b6bece4f229712e39002d77b555290fa550df5f40aa22d7d2a1e89feb3fef730ae33c937796e8e3")

	cardSecurity, err := NewCardSecurity(cardSecurityFile)

	// TODO - t.Panic then no need for cascade
	if err != nil {
		t.Errorf("Unexpected error: %s", err)
	} else if cardSecurity == nil {
		t.Errorf("CardSecurity expected")
	}

	if cardSecurity != nil {
		var certChain [][]byte

		certChain, err = cardSecurity.SD.Verify(cscaCertPool)
		if err != nil {
			t.Errorf("Error verifying SignedData: %s", err)
		}

		if len(certChain) != 2 {
			t.Errorf("Cert chain should have 2 certs")
		}

		// verify DSC cert
		{
			var actDscCert []byte = certChain[0]
			if !bytes.Equal(actDscCert, expCertDSC) {
				t.Errorf("Cert (DSC) mismatch (exp:%x, act:%x)", expCertDSC, actDscCert)
			}
		}

		// verify CSCA cert
		{
			var actCscaCert []byte = certChain[1]
			if !bytes.Equal(actCscaCert, expCertCSCA) {
				t.Errorf("Cert (CSCA) mismatch (exp:%x, act:%x)", expCertCSCA, actCscaCert)
			}
		}
	}

	// verify security-infos
	if cardSecurity != nil {
		// NB test data includes an unhandled sec-info, where id-CA-ECDH is incorrectly specified (from DE passport)
		if (cardSecurity.SecurityInfos.GetTotalCnt() != 7) ||
			(len(cardSecurity.SecurityInfos.PaceInfos) != 2) ||
			(len(cardSecurity.SecurityInfos.ChipAuthInfos) != 1) ||
			(len(cardSecurity.SecurityInfos.ChipAuthPubKeyInfos) != 2) ||
			(len(cardSecurity.SecurityInfos.TermAuthInfos) != 1) ||
			(len(cardSecurity.SecurityInfos.UnhandledInfos) != 1) {
			t.Errorf("Security-Info error")
		}
	}
}
